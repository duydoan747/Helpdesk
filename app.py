# app.py
from __future__ import annotations
import io
from datetime import datetime, date, time, timezone
from zoneinfo import ZoneInfo

import pandas as pd
import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from gspread.exceptions import WorksheetNotFound

# =========================
# Config c∆° b·∫£n
# =========================
st.set_page_config(
    page_title="IT Helpdesk ‚Üí SGDAVH",
    page_icon="üõ†Ô∏è",
    layout="wide",
)

APP_TITLE = "IT Helpdesk ‚Üí SGDAVH"
VN_TZ = ZoneInfo("Asia/Ho_Chi_Minh")

# =========================
# PH√ÇN QUY·ªÄN (ADMIN + VIEWER)
# =========================
ADMIN_EMAILS = {
    "duydoan747@gmail.com",   # admin
}
VIEWER_EMAILS = {
    "duydominic33@gmail.com",
}
ADMIN_EMAILS  = {e.strip().lower() for e in ADMIN_EMAILS}
VIEWER_EMAILS = {e.strip().lower() for e in VIEWER_EMAILS}
ALL_ALLOWED   = ADMIN_EMAILS | VIEWER_EMAILS

user_info = getattr(st, "experimental_user", None)
email_norm = (getattr(user_info, "email", None) or "").strip().lower()

st.sidebar.info(f"üë§ Email ƒëƒÉng nh·∫≠p hi·ªán t·∫°i: {email_norm or 'N/A'}")

def is_admin(e: str) -> bool:
    return e in ADMIN_EMAILS

def is_allowed(e: str) -> bool:
    return e in ALL_ALLOWED

if not email_norm:
    st.warning("App ƒëang ·ªü ch·∫ø ƒë·ªô public ho·∫∑c ch∆∞a nh·∫≠n ƒë∆∞·ª£c email ƒëƒÉng nh·∫≠p. "
               "B·∫°n ch·ªâ c√≥ th·ªÉ xem b√°o c√°o. H√£y b·∫≠t Viewer authentication ƒë·ªÉ h·∫°n ch·∫ø quy·ªÅn.")
    CAN_CREATE = False
else:
    CAN_CREATE = is_allowed(email_norm)

if email_norm and not CAN_CREATE:
    st.error("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o ticket. B·∫°n ch·ªâ c√≥ th·ªÉ xem b√°o c√°o.")
    # Ch·ªâ xem b√°o c√°o, kh√¥ng ƒë∆∞·ª£c t·∫°o ticket

# =========================
# Google Sheets
# =========================
SHEET_ID: str = st.secrets["SHEET_ID"]
SHEET_NAME = "Data"

COLUMNS = [
    "T√™n c√¥ng ty",
    "SHƒê",
    "Nguy√™n nh√¢n ƒë·∫ßu v√†o",
    "TT User",
    "T√¨nh tr·∫°ng",
    "C√°ch x·ª≠ l√Ω",
    "End ticket",
    "Th·ªùi gian ph√°t sinh (UTC ISO)",
    "Th·ªùi gian ho√†n th√†nh (UTC ISO)",
    "KTV",
    "CreatedAt (UTC ISO)",
    "SLA_gio",
]

def get_gspread_client_service():
    sa_info = st.secrets["gcp_service_account"]
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_info(sa_info, scopes=scopes)
    return gspread.authorize(creds)

@st.cache_resource(show_spinner=False)
def open_worksheet():
    gc = get_gspread_client_service()
    sh = gc.open_by_key(SHEET_ID)
    try:
        ws = sh.worksheet(SHEET_NAME)
    except WorksheetNotFound:
        ws = sh.add_worksheet(title=SHEET_NAME, rows=1000, cols=len(COLUMNS))
        ws.append_row(COLUMNS, value_input_option="RAW")
    return ws

@st.cache_data(show_spinner=False, ttl=60)
def read_all_as_dataframe() -> pd.DataFrame:
    ws = open_worksheet()
    values = ws.get_all_values()
    if not values or len(values) == 1:
        return pd.DataFrame(columns=COLUMNS)

    df = pd.DataFrame(values[1:], columns=values[0])
    for col in COLUMNS:
        if col not in df.columns:
            df[col] = ""

    for col in ["Th·ªùi gian ph√°t sinh (UTC ISO)", "Th·ªùi gian ho√†n th√†nh (UTC ISO)", "CreatedAt (UTC ISO)"]:
        df[col] = pd.to_datetime(df[col], errors="coerce", utc=True)

    has_both = df["Th·ªùi gian ph√°t sinh (UTC ISO)"].notna() & df["Th·ªùi gian ho√†n th√†nh (UTC ISO)"].notna()
    df.loc[has_both, "SLA_gio"] = (
        (df.loc[has_both, "Th·ªùi gian ho√†n th√†nh (UTC ISO)"] - df.loc[has_both, "Th·ªùi gian ph√°t sinh (UTC ISO)"])
        .dt.total_seconds() / 3600.0
    )
    df["SLA_gio"] = pd.to_numeric(df["SLA_gio"], errors="coerce")

    df["Ph√°t sinh (VN)"] = df["Th·ªùi gian ph√°t sinh (UTC ISO)"].dt.tz_convert(VN_TZ)
    df["Ho√†n th√†nh (VN)"] = df["Th·ªùi gian ho√†n th√†nh (UTC ISO)"].dt.tz_convert(VN_TZ)

    return df.sort_values(by="Th·ªùi gian ph√°t sinh (UTC ISO)", ascending=False, na_position="last").reset_index(drop=True)

def to_csv_bytes(df: pd.DataFrame) -> bytes:
    out = io.StringIO()
    df.to_csv(out, index=False, encoding="utf-8")
    return out.getvalue().encode("utf-8")

def local_to_utc_iso(d: date, t: time) -> str:
    dt_local = datetime(d.year, d.month, d.day, t.hour, t.minute, t.second, tzinfo=VN_TZ)
    return dt_local.astimezone(timezone.utc).isoformat()

def append_ticket(row: list[str]) -> None:
    ws = open_worksheet()
    ws.append_row(row, value_input_option="RAW")

# =========================
# UI
# =========================
st.title(APP_TITLE)
st.caption("L∆∞u & b√°o c√°o ticket tr·ª±c ti·∫øp tr√™n Google Sheets (Service Account qua Secrets)")

# Form t·∫°o ticket (ch·ªâ ng∆∞·ªùi c√≥ quy·ªÅn m·ªõi th·∫•y)
if CAN_CREATE:
    with st.expander("‚ûï Nh·∫≠p ticket m·ªõi", expanded=True):
        with st.form("ticket_form", clear_on_submit=True):
            c1, c2 = st.columns(2)

            ten_cty = c1.text_input("T√™n c√¥ng ty *")
            ngay_psinh = c2.date_input("Ng√†y ph√°t sinh *", value=datetime.now(VN_TZ).date(), format="YYYY/MM/DD")
            shd = c1.text_input("SHƒê (S·ªë Hƒê/S·ªë h·ªì s∆°) *")
            gio_psinh = c2.time_input("Gi·ªù ph√°t sinh *", value=datetime.now(VN_TZ).time().replace(second=0), step=60)

            nguyen_nhan = c1.text_input("Nguy√™n nh√¢n ƒë·∫ßu v√†o *")
            tt_user = c2.text_input("TT User")
            cach_xl = c1.text_area("C√°ch x·ª≠ l√Ω * (m√¥ t·∫£ ng·∫Øn g·ªçn)")
            end_ticket = c2.selectbox("End ticket", ["Remote", "Onsite", "T·∫°o Checklist cho chi nh√°nh"])

            tinh_trang = c1.selectbox("T√¨nh tr·∫°ng *", ["M·ªõi", "ƒêang x·ª≠ l√Ω", "Ho√†n th√†nh", "T·∫°m d·ª´ng"])
            ktv = c2.text_input("KTV ph·ª• tr√°ch")

            co_tg_hoanthanh = st.checkbox("C√≥ th·ªùi gian ho√†n th√†nh?")
            if co_tg_hoanthanh:
                c3, c4 = st.columns(2)
                ngay_done = c3.date_input("Ng√†y ho√†n th√†nh", value=datetime.now(VN_TZ).date(), format="YYYY/MM/DD")
                gio_done = c4.time_input("Gi·ªù ho√†n th√†nh", value=datetime.now(VN_TZ).time().replace(second=0), step=60)
                tg_done_utc = local_to_utc_iso(ngay_done, gio_done)
            else:
                tg_done_utc = ""

            submitted = st.form_submit_button("L∆∞u v√†o Google Sheet", type="primary")
            if submitted:
                if not (ten_cty and shd and nguyen_nhan and cach_xl and tinh_trang):
                    st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
                else:
                    try:
                        tg_ps_utc = local_to_utc_iso(ngay_psinh, gio_psinh)
                        created_utc = datetime.now(timezone.utc).isoformat()

                        if tg_done_utc:
                            start = datetime.fromisoformat(tg_ps_utc.replace("Z", "+00:00"))
                            end = datetime.fromisoformat(tg_done_utc.replace("Z", "+00:00"))
                            sla_gio = round((end - start).total_seconds() / 3600.0, 2)
                        else:
                            sla_gio = ""

                        row = [
                            ten_cty,
                            shd,
                            nguyen_nhan,
                            tt_user,
                            tinh_trang,
                            cach_xl,
                            end_ticket,
                            tg_ps_utc,
                            tg_done_utc,
                            ktv,
                            created_utc,
                            sla_gio,
                        ]
                        append_ticket(row)
                        st.success("‚úÖ ƒê√£ l∆∞u ticket v√†o Google Sheet!")
                        st.balloons()
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi ghi Google Sheet: {e}")

st.divider()

# =========================
# B√°o c√°o
# =========================
st.header("üìä B√°o c√°o & L·ªçc d·ªØ li·ªáu")

c1, c2, c3, c4 = st.columns([1, 1, 1, 1])
today_vn = datetime.now(VN_TZ).date()
from_day = c1.date_input("T·ª´ ng√†y", value=today_vn.replace(day=max(1, today_vn.day - 7)), format="YYYY/MM/DD")
to_day = c2.date_input("ƒê·∫øn ng√†y", value=today_vn, format="YYYY/MM/DD")
flt_cty = c3.text_input("L·ªçc theo t√™n Cty")
flt_ktv = c4.text_input("L·ªçc theo KTV")

try:
    df_raw = read_all_as_dataframe()
    if df_raw.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
    else:
        m_start = datetime(from_day.year, from_day.month, from_day.day, 0, 0, tzinfo=VN_TZ)
        m_end = datetime(to_day.year, to_day.month, to_day.day, 23, 59, 59, tzinfo=VN_TZ)

        df = df_raw.copy()
        in_range = df["Ph√°t sinh (VN)"].between(m_start, m_end, inclusive="both")
        df = df[in_range]

        if flt_cty.strip():
            df = df[df["T√™n c√¥ng ty"].str.contains(flt_cty.strip(), case=False, na=False)]
        if flt_ktv.strip():
            df = df[df["KTV"].str.contains(flt_ktv.strip(), case=False, na=False)]

        show_cols = [
            "T√™n c√¥ng ty",
            "SHƒê",
            "Nguy√™n nh√¢n ƒë·∫ßu v√†o",
            "TT User",
            "T√¨nh tr·∫°ng",
            "C√°ch x·ª≠ l√Ω",
            "End ticket",
            "Ph√°t sinh (VN)",
            "Ho√†n th√†nh (VN)",
            "KTV",
            "SLA_gio",
        ]
        st.dataframe(
            df[show_cols].assign(
                **{
                    "Ph√°t sinh (VN)": df["Ph√°t sinh (VN)"].dt.strftime("%Y-%m-%d %H:%M:%S"),
                    "Ho√†n th√†nh (VN)": df["Ho√†n th√†nh (VN)"].dt.strftime("%Y-%m-%d %H:%M:%S"),
                }
            ),
            use_container_width=True,
            hide_index=True,
        )

        st.download_button(
            "‚¨áÔ∏è T·∫£i CSV ƒë√£ l·ªçc",
            data=to_csv_bytes(df[show_cols]),
            file_name=f"helpdesk_{from_day}_{to_day}.csv",
            mime="text/csv",
        )
except Exception as e:
    st.error(f"ƒê√£ g·∫∑p l·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
