# app.py
from __future__ import annotations

import io
import time, random
from functools import wraps
from datetime import datetime, date, time as dtime, timezone
from zoneinfo import ZoneInfo

import pandas as pd
import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
from gspread.exceptions import WorksheetNotFound

# =========================
# C·∫•u h√¨nh chung
# =========================
st.set_page_config(
    page_title="IT Helpdesk ‚Üí SGDAVH",
    page_icon="üõ†Ô∏è",
    layout="wide",
)

APP_TITLE = "IT Helpdesk ‚Üí SGDAVH"
VN_TZ = ZoneInfo("Asia/Ho_Chi_Minh")

# L·∫•y t·ª´ Secrets
SHEET_ID: str = st.secrets["SHEET_ID"]
SHEET_NAME = "Data"

# Header c·ªë ƒë·ªãnh tr√™n Sheet (th·ª© t·ª± c·ªôt)
COLUMNS = [
    "T√™n c√¥ng ty",
    "SHD",
    "Nguy√™n nh√¢n ƒë·∫ßu v√†o",
    "TT User",
    "T√¨nh tr·∫°ng",
    "End ticket",
    "C√°ch x·ª≠ l√Ω",
    "Th·ªùi gian ph√°t sinh (UTC ISO)",
    "Th·ªùi gian ho√†n th√†nh (UTC ISO)",
    "KTV",
    "CreatedAt (UTC ISO)",
    "SLA_gio",
]

# =========================
# Retry/Backoff utilities
# =========================
def retry(max_attempts=5, base=0.5, cap=8.0):
    """Exponential backoff cho c√°c call t·ªõi Google API."""
    def deco(fn):
        @wraps(fn)
        def inner(*args, **kwargs):
            delay = base
            for attempt in range(1, max_attempts + 1):
                try:
                    return fn(*args, **kwargs)
                except Exception:
                    if attempt == max_attempts:
                        raise
                    time.sleep(delay + random.random() * 0.2)
                    delay = min(delay * 2, cap)
        return inner
    return deco

# =========================
# K·∫øt n·ªëi Google Sheets
# =========================
def get_gspread_client_service():
    """Authorize gspread d√πng dict trong secrets['gcp_service_account'] v·ªõi scope t·ªëi thi·ªÉu."""
    sa_info = st.secrets["gcp_service_account"]
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",   # ghi/ƒë·ªçc sheet
        "https://www.googleapis.com/auth/drive.file",     # ch·ªâ c√°c file ƒë∆∞·ª£c share/ƒë∆∞·ª£c app t·∫°o
    ]
    creds = Credentials.from_service_account_info(sa_info, scopes=scopes)
    return gspread.authorize(creds)

def _ensure_header(ws) -> None:
    """ƒê·∫£m b·∫£o h√†ng 1 l√† header ƒë√∫ng nh∆∞ COLUMNS."""
    header = ws.row_values(1)
    if header != COLUMNS:
        ws.update("A1", [COLUMNS])

@st.cache_resource(show_spinner=False)
def open_worksheet():
    """M·ªü worksheet; n·∫øu ch∆∞a c√≥ th√¨ t·∫°o v√† ghi header."""
    gc = get_gspread_client_service()
    sh = gc.open_by_key(SHEET_ID)
    try:
        ws = sh.worksheet(SHEET_NAME)
    except WorksheetNotFound:
        ws = sh.add_worksheet(title=SHEET_NAME, rows=1000, cols=len(COLUMNS))
        ws.update("A1", [COLUMNS])
        return ws
    _ensure_header(ws)
    return ws

def _open_or_create_logs(sh):
    try:
        return sh.worksheet("Logs")
    except WorksheetNotFound:
        wslog = sh.add_worksheet("Logs", rows=1000, cols=3)
        wslog.append_row(["UTC", "Action", "Message"])
        return wslog

def log_error(action: str, msg: str):
    """Ghi l·ªói nh·∫π nh√†ng v√†o sheet Logs (im l·∫∑ng khi th·∫•t b·∫°i ƒë·ªÉ tr√°nh v√≤ng l·∫∑p)."""
    try:
        gc = get_gspread_client_service()
        sh = gc.open_by_key(SHEET_ID)
        wslog = _open_or_create_logs(sh)
        wslog.append_row([datetime.utcnow().isoformat(), action, str(msg)])
    except Exception:
        pass

@retry()
def _safe_append_row(ws, row):
    ws.append_row(row, value_input_option="RAW")

@retry()
def _safe_get_all_values(ws):
    return ws.get_all_values()

@st.cache_data(show_spinner=False, ttl=60)
def read_all_as_dataframe() -> pd.DataFrame:
    """ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu th√†nh DataFrame; parse th·ªùi gian & t√≠nh SLA."""
    ws = open_worksheet()
    values = _safe_get_all_values(ws)

    if not values or len(values) == 1:  # ch·ªâ c√≥ header ho·∫∑c r·ªóng
        return pd.DataFrame(columns=COLUMNS)

    header = values[0]
    rows = values[1:]
    df = pd.DataFrame(rows, columns=header)

    # B·ªï sung c·ªôt thi·∫øu (n·∫øu sheet c≈© ch∆∞a ƒë·ªß header)
    for col in COLUMNS:
        if col not in df.columns:
            df[col] = ""

    # Parse th·ªùi gian UTC
    for col in ["Th·ªùi gian ph√°t sinh (UTC ISO)", "Th·ªùi gian ho√†n th√†nh (UTC ISO)", "CreatedAt (UTC ISO)"]:
        df[col] = pd.to_datetime(df[col], errors="coerce", utc=True)

    # T√≠nh SLA_gio n·∫øu c√≥ ƒë·ªß 2 m·ªëc
    has_both = df["Th·ªùi gian ph√°t sinh (UTC ISO)"].notna() & df["Th·ªùi gian ho√†n th√†nh (UTC ISO)"].notna()
    df.loc[has_both, "SLA_gio"] = (
        (df.loc[has_both, "Th·ªùi gian ho√†n th√†nh (UTC ISO)"] - df.loc[has_both, "Th·ªùi gian ph√°t sinh (UTC ISO)"])
        .dt.total_seconds() / 3600.0
    )
    df["SLA_gio"] = pd.to_numeric(df["SLA_gio"], errors="coerce")

    # Th√™m c·ªôt hi·ªÉn th·ªã theo gi·ªù VN
    df["Ph√°t sinh (VN)"] = df["Th·ªùi gian ph√°t sinh (UTC ISO)"].dt.tz_convert(VN_TZ)
    df["Ho√†n th√†nh (VN)"] = df["Th·ªùi gian ho√†n th√†nh (UTC ISO)"].dt.tz_convert(VN_TZ)

    # S·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc
    df = df.sort_values(by=["Th·ªùi gian ph√°t sinh (UTC ISO)"], ascending=False, na_position="last").reset_index(drop=True)
    return df

def to_csv_bytes(df: pd.DataFrame) -> bytes:
    out = io.StringIO()
    df.to_csv(out, index=False, encoding="utf-8")
    return out.getvalue().encode("utf-8")

# ===== Helpers (th·ªùi gian) =====
def now_vn_rounded():
    n = datetime.now(VN_TZ)
    return n.replace(second=0, microsecond=0)

def to_utc_iso(dt_local: datetime) -> str:
    """Datetime VN ‚Üí UTC ISO string."""
    return dt_local.astimezone(timezone.utc).isoformat()

def append_ticket(row: list[str]) -> None:
    ws = open_worksheet()
    _safe_append_row(ws, row)

# =========================
# UI
# =========================
st.title(APP_TITLE)
st.caption("L∆∞u & b√°o c√°o ticket tr·ª±c ti·∫øp tr√™n Google Sheets (Service Account qua Secrets)")

with st.expander("‚ûï Nh·∫≠p ticket m·ªõi", expanded=True):
    # D√πng FORM ƒë·ªÉ submit & auto-clear
    with st.form("ticket_form", clear_on_submit=True):
        c1, c2 = st.columns(2)

        ten_cty = c1.text_input("T√™n c√¥ng ty *")
        ngay_psinh = c2.date_input("Ng√†y ph√°t sinh *", value=datetime.now(VN_TZ).date(), format="YYYY/MM/DD")
        shd = c1.text_input("SHD (S·ªë Hƒê/S·ªë h·ªì s∆°) *")
        gio_psinh = c2.time_input("Gi·ªù ph√°t sinh *", value=now_vn_rounded().time(), step=60)

        nguyen_nhan = c1.text_input("Nguy√™n nh√¢n ƒë·∫ßu v√†o *")
        tt_user = c2.text_input("TT User")

        cach_xl = c1.text_area("C√°ch x·ª≠ l√Ω * (m√¥ t·∫£ ng·∫Øn g·ªçn)")

        tinh_trang = c2.selectbox("T√¨nh tr·∫°ng *", ["M·ªõi", "ƒêang x·ª≠ l√Ω", "Ho√†n th√†nh", "T·∫°m d·ª´ng"], index=0)

        end_ticket = c1.selectbox(
            "End ticket",
            ["Remote", "Onsite", "T·∫°o Checklist cho chi nh√°nh"],
            index=0,
        )

        ktv = c2.text_input("KTV ph·ª• tr√°ch")

        co_tg_hoanthanh = st.checkbox("C√≥ th·ªùi gian ho√†n th√†nh?")
        if co_tg_hoanthanh:
            c3, c4 = st.columns(2)
            ngay_done = c3.date_input("Ng√†y ho√†n th√†nh", value=datetime.now(VN_TZ).date(), format="YYYY/MM/DD")
            gio_done = c4.time_input("Gi·ªù ho√†n th√†nh", value=now_vn_rounded().time(), step=60)
        else:
            ngay_done, gio_done = None, None

        submitted = st.form_submit_button("L∆∞u v√†o Google Sheet", type="primary")

    # X·ª≠ l√Ω sau khi submit (form ƒë√£ clear n·∫øu submitted == True)
    if submitted:
        # Validate b·∫Øt bu·ªôc
        required = [ten_cty, shd, nguyen_nhan, cach_xl, tinh_trang]
        if any(not (x or "").strip() for x in required):
            st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc (*)")
        else:
            try:
                # Gh√©p th·ªùi gian LOCAL (VN) ƒë√£ ch·ªçn
                start_local = datetime(
                    ngay_psinh.year, ngay_psinh.month, ngay_psinh.day,
                    gio_psinh.hour, gio_psinh.minute, tzinfo=VN_TZ
                )
                if ngay_done and gio_done:
                    end_local = datetime(
                        ngay_done.year, ngay_done.month, ngay_done.day,
                        gio_done.hour, gio_done.minute, tzinfo=VN_TZ
                    )
                    # SLA theo LOCAL ‚Üí ch√≠nh x√°c, kh√¥ng l·ªách TZ
                    sla_gio = round((end_local - start_local).total_seconds() / 3600.0, 2)
                    end_utc_iso = to_utc_iso(end_local)
                else:
                    sla_gio = ""
                    end_utc_iso = ""

                start_utc_iso = to_utc_iso(start_local)
                created_utc = datetime.now(timezone.utc).isoformat()

                row = [
                    ten_cty,               # T√™n c√¥ng ty
                    shd,                   # SHD
                    nguyen_nhan,           # Nguy√™n nh√¢n ƒë·∫ßu v√†o
                    tt_user,               # TT User
                    tinh_trang,            # T√¨nh tr·∫°ng
                    end_ticket,            # End ticket
                    cach_xl,               # C√°ch x·ª≠ l√Ω
                    start_utc_iso,         # Th·ªùi gian ph√°t sinh (UTC ISO)
                    end_utc_iso,           # Th·ªùi gian ho√†n th√†nh (UTC ISO)
                    ktv,                   # KTV
                    created_utc,           # CreatedAt (UTC ISO)
                    sla_gio,               # SLA_gio
                ]
                append_ticket(row)
                st.cache_data.clear()
                st.success("‚úÖ ƒê√£ l∆∞u ticket v√†o Google Sheet! (Form ƒë√£ ƒë∆∞·ª£c reset)")

            except Exception as e:
                log_error("APPEND", e)
                st.error(f"‚ùå L·ªói khi ghi Google Sheet: {e}")

st.divider()

# =========================
# B√°o c√°o & L·ªçc d·ªØ li·ªáu
# =========================
st.header("üìä B√°o c√°o & L·ªçc d·ªØ li·ªáu")

c1, c2, c3, c4 = st.columns([1, 1, 1, 1])
today_vn = datetime.now(VN_TZ).date()
from_day = c1.date_input("T·ª´ ng√†y", value=today_vn, format="YYYY/MM/DD")
to_day = c2.date_input("ƒê·∫øn ng√†y", value=today_vn, format="YYYY/MM/DD")
flt_cty = c3.text_input("L·ªçc theo t√™n Cty")
flt_ktv = c4.text_input("L·ªçc theo KTV")

try:
    df_raw = read_all_as_dataframe()
    if df_raw.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
    else:
        # L·ªçc theo ng√†y (d·ª±a tr√™n th·ªùi gian *VN*)
        m_start = datetime(from_day.year, from_day.month, from_day.day, 0, 0, tzinfo=VN_TZ)
        m_end = datetime(to_day.year, to_day.month, to_day.day, 23, 59, 59, tzinfo=VN_TZ)

        df = df_raw.copy()
        in_range = df["Ph√°t sinh (VN)"].between(m_start, m_end, inclusive="both")
        df = df[in_range]

        if flt_cty.strip():
            df = df[df["T√™n c√¥ng ty"].astype(str).str.contains(flt_cty.strip(), case=False, na=False)]
        if flt_ktv.strip():
            df = df[df["KTV"].astype(str).str.contains(flt_ktv.strip(), case=False, na=False)]

        show_cols = [
            "T√™n c√¥ng ty", "SHD", "Nguy√™n nh√¢n ƒë·∫ßu v√†o", "TT User",
            "T√¨nh tr·∫°ng", "End ticket", "C√°ch x·ª≠ l√Ω",
            "Ph√°t sinh (VN)", "Ho√†n th√†nh (VN)", "KTV", "SLA_gio",
        ]
        cols_view = [c for c in show_cols if c in df.columns]

        if "Ph√°t sinh (VN)" in df.columns:
            df["Ph√°t sinh (VN)"] = df["Ph√°t sinh (VN)"].dt.strftime("%Y-%m-%d %H:%M:%S")
        if "Ho√†n th√†nh (VN)" in df.columns:
            df["Ho√†n th√†nh (VN)"] = df["Ho√†n th√†nh (VN)"].dt.strftime("%Y-%m-%d %H:%M:%S")

        st.dataframe(df[cols_view] if cols_view else df, use_container_width=True, hide_index=True)

        st.download_button(
            "‚¨áÔ∏è T·∫£i CSV ƒë√£ l·ªçc",
            data=to_csv_bytes(df[cols_view] if cols_view else df),
            file_name=f"helpdesk_{from_day}_{to_day}.csv",
            mime="text/csv",
        )
except Exception as e:
    log_error("REPORT_LOAD", e)
    st.error(f"ƒê√£ g·∫∑p l·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
